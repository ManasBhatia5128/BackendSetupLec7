To keep track of empty folders, we make the .gitkeep file in order to store folders, since git does not keep track of empty folders
Nodemon: restarts server when file contents are changed
dev dependncy: used while development not while production, it has no role in production
to install use --save-dev or -D ie for nodemon: npm i --save-dev nodemon

controller: functionality
middleware: request from server, middleares checks the request -> jaane se pehle mujhse milke jaana
DB: database connection logic
models
routes: routes for app
utils: utility eg file uploading, mailing, tokens ka len-den

Team should be on same page, 4 spaces, 2 spaces for git project
for this prettier is also used as a node module, can also be installed as dev dependncy
trailing comma: all or es5
prettierignore: prettier ignore these things

In production grade settings, we never do: allow access from anywhere

Database se connect krte time problems aa sakti hain aur kaafi baar aati hain
**try, catch use kro ya fir promise ka syntax .then() .catch() wala, koi na koi krna hi padega**
**database is in another continent", baat krne mein time lgta hai, async await ka use karo

we use IIFE(immediately invoked function expression)
;IIEF: this syntax is used in case our editor didn't add semicolon is prev lines, then the IIFE function does problems in executing

to use experimental setup of dotenv 
add in dev in package.json
" -r dotenv/config --experimental-json-modules src/index.js"
syntax: dotenv.config({
    path: './env
})

middlewares are used by app.use() syntax

middleware practical example:
think you wanted to like a video on instagram, when you clicked like you couldn't because you haven't logged in
server tk like ki request gyi hi nhi, middleare ne use pehle hi rok liya
also we can add multiple middlewares
(err, req, res, next)
next is a flag which tells if middleware is used
higher order functions: functions which accept function as parameters
some examples of higher order funcns are map, filter etc or setTimeout, setInterval, basically we want to perform some operation on the function itself
basically a HOF takes a func as parameter or might return a function



Lecture-10:
BSON is used internally by MongoDB to represent documents.
Libraries like bson in Node.js provide methods to serialize and deserialize data to/from BSON.
bcrypt and bcryptjs are almost similar
bcrypt library is is used to hash passwords
JWT: JsonWebToken: encodes payload (data)

pre hook: data save hone se just pehle kuch ho jaaye, eg: password hash ho jaaye

Interview: JWT is a bearer's token, jiske pass ye token hai, data usko chale jaata hai

Lec-11
Multer se temporarily apne local server pr file rakh denge fir uske baad Cloudinary ko di jaati hai
(although directly bhi upload kr skte hain but production mein 2 steps use hote hain)
Cloudinary is a service like AWS (Cloudinary also uses AWS in backend)
Cloudinary is also an SDK
unlink: delete

We are using multer as middleware
25:30 => use of temp code
files in public temp will be stored for a very little time, so we are not that bothered about filename that's why we are storing original name, change it later 33;00

Lecture-2
URL/I?N: Uniform Resource Locator/ Identifier/  Name -> basically address

What are http headers
 meta data: key-val pairs sent along with request and response
 used for caching, authenticating, state management, x-prefix: deprecated
 Request headers: from client
 Response headers: from server
 Representation headers: encoding/ compression
 Payload headers: data (payload mtlb data, just a fancy name)

 most common headers:
 accept: appln/json
 user-agent: konsi appln se request aayi hai, postman, broweser etc
 authorization: bearer___ JWT token
 content-type: image/vid/pdf kaisa content
 cookies: {key:val} pair info about user
 cache-control: kb tk login rakhna user ko etc etc

 also cors and security headers

 HTTP methods: operations which can be done to interact with the server
 GET, POST, PUT, DELETE, PATCH

 HTTP status codes
 1xx: Informational
 2xx: Success
 3xx: Redirection
 4xx: Client error
 5xx: Server error


 GPT token example
 Google Sign-In and Token Flow
Initial Login:

When you log in to a Google account (with your email and password or via two-factor authentication), Google authenticates you and issues:
An access token (short-lived).
A refresh token (long-lived).
These tokens are stored securely in your browser or app.
Using Access Tokens:

The access token is used to allow websites or apps to communicate with Google's APIs (e.g., Google Calendar, Gmail) without asking for your credentials every time.
Since access tokens are short-lived, they provide enhanced security (limited window for misuse if stolen).
Refreshing Tokens:

When the access token expires, the refresh token is used behind the scenes to get a new access token without requiring you to log in again.
This is why you can use Google services for an extended period without entering your password repeatedly.
Refresh Token Expiry or Revocation:

If the refresh token expires (e.g., after 30 days or more) or is revoked (e.g., by a password change or logout from all devices), you'll be asked to log in again.

generateAccessToken → for short-term API authentication.
generateRefreshToken → for renewing access tokens.

import export statemnents detailed understanding is required


lecture-14
user registeration steps:
1. get user data through a form from frontend
2. check validations, correct email, fields not empty etc
3. check if user already exists (using email or uniqe username)
4. check if files are provided (avatar is compulsary) // multer check
5. when checked upload avatar and image to Cloudinary, (avatar check kro) // Cloudinary check
6. create user object -> create entry in database
7. remove password and refresh token field from response
8. check for user creation
9. return response

//Random GPT doubt but important
{
    JavaScript is synchronous by nature, executing code line by line in a single-threaded environment. However, tasks like `fetch` requests are **asynchronous** and handled by the browser or Node.js runtime, not directly by JavaScript itself. These tasks are offloaded to the browser's Web APIs or Node.js systems, allowing JavaScript to continue executing other code without blocking.

Once the fetch operation completes, its result is sent back to JavaScript through the **event loop**, where the associated callback (like `.then()` or `await`) is executed when the main thread is idle. This is why a `fetch` request doesn’t block subsequent lines of code.

To make code "wait" for asynchronous tasks, you can use `async/await`, which pauses the function’s execution until the task completes, while still keeping the main thread free for other operations.

In summary, while JavaScript itself is synchronous, its integration with asynchronous systems like Web APIs allows non-blocking behavior for tasks such as fetch requests, timers, and I/O operations, enhancing efficiency and user experience.
}

// Use of timestamps
{
    basically used to keep record of entities createdAt and updatedAt, basically when we have recored of this thing for each data it can be used for sorting and keeping record of when some entity is created or updated 
}


-------------------------------------------
Lec-14: controllers
{} must be used while import if default keyword is not used
?. means optional chaining, that is if exist nhi krti toh error nhi ayega